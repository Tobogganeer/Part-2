Show what the scenes will look like, describe the interaction, and identify the Unity components & script functionality required.

Identify at least three features (distinct chunks of functionality, or steps of the development) of your
scenes. For each feature, use at least one page (A4 or letter) to describe and problem-solve how to
achieve this functionality, including pseudocode and diagrams/maths/notes as required.

You will make a branch for each feature, and implement that functionality on this branch, making at least
one commit to the branch. The scenes should run without errors when you are finished with this feature
(even if it doesn’t do much yet). You will merge the branch into main before starting work on the next
feature.

PseudocodeFeauture.cs (feature here)
- Input
- Functionality
- Components
- Pseudocode:
  - Pseudocode here


Chosen: Missile Dodging Game -> MissileDodge

Features: player, missiles, missile spawner, missile warning, main menu, hud, score, missile dodge manager

Jet.cs (player)
- Goes towards cursor location
- Has a temporary speed boost on click
- Turns to face the cursor and flies forward
- Has limited number of lives
- By nature of following mouse will never fly too far out of bounds
- Rigidbody2D (kinematic) for movement and collisions
- Some kind of 2D collider (maybe capsule)
- Animator for plane animations (maybe wiggles wings when turning)
- Pseudocode:
  - Variables for speed, angularSpeed, boostTime, boostCurve, boostCooldown, boostTimer,
  - (cont'd) rigidbody, targetRotation, animator, lives
  - Gather references to components in Start
  - Update target rotation and animator in Update
  - (cont'd) Check for boost in Update and update HUD
  - Rotate and move in FixedUpdate
  - Subtract life on destroy and respawn plane after a few seconds
  - End game if zero lives left

Missile.cs
- Spawned outside of screen
- Tracks towards where plane will be (predicts position)
- Turns slowly (can be out-maneuvered)
- Gains speed over time before exploding after some time
- Spawns explosion effect when blowing up (due to plane or time fuse)
- Destroys plane (and self) on collision
- Rigidbody2D for movement
- Animator for smoke and boost animations
- Collider used to detect crash
- Pseudocode:
  - Variables for speed, angularSpeed, velocityCurve, maxLifetime, lifetime,
  - (cont'd) rigidbody, targetRotation, plane, animator, explosionPrefab (overall very similar to plane)
  - ^^^ Maybe missile and plane will inherit from common base class (or composition smth)
  - Gather references to components and plane in Start
  - (cont'd) Update 'missiles spawned' count of HUD/Manager
  - Predict plane position and update target rotation in Update
  - (con't) Increment lifetime and update speeds accordingly (Destroy if max lifetime reached)
  - Rotate and move in FixedUpdate
  - Destroy self and plane in OnTriggerEnter2D with plane
  - fn Explode() -> spawns explosion particles and destroys

MissileSpawner.cs
- Activates a missile warning and spawns a missile every few seconds (randomized)
- Stores a list of spawn areas (boxes) and spawns the missile in a random area of a random box
- No extra components (empty gameobject)
- Pseudocode:
  - Variables for missileSpawnTimeRange, spawnTimer, spawnAreas, missileWarningPrefab
  - Update timer and spawn missile warning if necessary in Update (see below)
  - fn SpawnMissileWarning() ->
    - Pick random spawn area
    - Pick random position from selected area (will be inside screen)
    - Push position backwards to find missile spawn position
    - Spawn missile warning at position (in screen), passing it the missile position
    - Missile warning handles spawn of missile itself

MissileSpawnArea.cs
- Stores where missile warnings and missiles can be spawned
- Just a vector2 for the area and a float for how far back missiles should be spawned
- Pseudocode
  - Variables for areaSize, missilePushback
  - fn GetRandomPosition() -> returns random point in area (will be onscreen)
  - fn GetMissilePosition(spawnPos) -> pushes spawnPos back by missilePushback (will be offscreen)
  - Draw helpful visuals in OnDrawGizmos

MissileWarning.cs
- Input
- Functionality
- Components
- Pseudocode:
  - Variables for
  -

MainMenu.cs
- Input
- Functionality
- Components
- Pseudocode:
  - Variables for
  -

HUD.cs (heads-up display, score and such)
- Input
- Functionality
- Components
- Pseudocode:
  - Variables for
  -

Score.cs
- Input
- Functionality
- Components
- Pseudocode:
  - Variables for
  -

MissileDodgeManager.cs (various housekeeping)
- Input
- Functionality
- Components
- Pseudocode:
  - Variables for
  -